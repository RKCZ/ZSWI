# PySerial module for interaction with serial Port (USB)
import serial
# needed for creating timestamp
import time
# needed just for testing
from random import random as rand
# pyLSL module
from pylsl import StreamInfo, StreamOutlet, local_clock

# setting of informations about LSL stream
info = StreamInfo('TestStream', 'Markers', 1, 0, 'string', 'TestID0605')

# appending metadata to stream
info.desc().append_child_value("manufacturer", "Kalivoda")
channels = info.desc().append_child("channels")
channels.append_child("channel") \
        .append_child_value("label", "emg") \
        .append_child_value("unit", "string") \
        .append_child_value("type", "EMG Data")

outlet = StreamOutlet(info, 32, 360)


dev = b.core.find(idVendor=0x062a, idProduct=0x4101)

if dev is None:
        raise ValueError('Neco je spatne, zkus to znovu (Device not found)')

cfg = dev.get_active_configuration()

interface = 0
endpoint = dev[0][(0,0)][0]

if dev.is_kernel_driver_active(interface) is True:
        dev.detach_kernel_driver(interface)
        usb.util.claim_interface(dev, interface)
collected = 0
attempts = 50

print("Now sending data...")
#n = 0
while True:
    sample = ''
    try:
        data = dev.read(endpoint.bEndpointAddress,endpoint.wMaxPacketSize)
        sample = data
        print(sample)
    except usb.core.USBError as e:
        data = None
        if e.args == ('Operation timed out',):
            continue
#    sample = [n, n, n, n, n, n, n, n]
#    sample = [0, 0, 0, 0, 0, 0, 0, 0]
    stamp = local_clock()
    outlet.push_sample(sample, stamp)
#    time.sleep(0.01)
#    n = n + 1

